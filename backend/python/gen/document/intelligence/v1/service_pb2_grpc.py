# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from document.intelligence.v1 import service_pb2 as document_dot_intelligence_dot_v1_dot_service__pb2


class DocumentIntelligenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClassifyDocument = channel.unary_unary(
                '/document.intelligence.v1.service.DocumentIntelligenceService/ClassifyDocument',
                request_serializer=document_dot_intelligence_dot_v1_dot_service__pb2.ClassifyDocumentRequest.SerializeToString,
                response_deserializer=document_dot_intelligence_dot_v1_dot_service__pb2.ClassifyDocumentResponse.FromString,
                _registered_method=True)
        self.DetectDocumentText = channel.unary_unary(
                '/document.intelligence.v1.service.DocumentIntelligenceService/DetectDocumentText',
                request_serializer=document_dot_intelligence_dot_v1_dot_service__pb2.DetectDocumentTextRequest.SerializeToString,
                response_deserializer=document_dot_intelligence_dot_v1_dot_service__pb2.DetectDocumentTextResponse.FromString,
                _registered_method=True)


class DocumentIntelligenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ClassifyDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectDocumentText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocumentIntelligenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClassifyDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.ClassifyDocument,
                    request_deserializer=document_dot_intelligence_dot_v1_dot_service__pb2.ClassifyDocumentRequest.FromString,
                    response_serializer=document_dot_intelligence_dot_v1_dot_service__pb2.ClassifyDocumentResponse.SerializeToString,
            ),
            'DetectDocumentText': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectDocumentText,
                    request_deserializer=document_dot_intelligence_dot_v1_dot_service__pb2.DetectDocumentTextRequest.FromString,
                    response_serializer=document_dot_intelligence_dot_v1_dot_service__pb2.DetectDocumentTextResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'document.intelligence.v1.service.DocumentIntelligenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DocumentIntelligenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ClassifyDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/document.intelligence.v1.service.DocumentIntelligenceService/ClassifyDocument',
            document_dot_intelligence_dot_v1_dot_service__pb2.ClassifyDocumentRequest.SerializeToString,
            document_dot_intelligence_dot_v1_dot_service__pb2.ClassifyDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectDocumentText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/document.intelligence.v1.service.DocumentIntelligenceService/DetectDocumentText',
            document_dot_intelligence_dot_v1_dot_service__pb2.DetectDocumentTextRequest.SerializeToString,
            document_dot_intelligence_dot_v1_dot_service__pb2.DetectDocumentTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
