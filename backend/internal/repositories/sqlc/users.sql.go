// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlcrepositiories

import (
	"context"

	"github.com/google/uuid"
)

const addUser = `-- name: AddUser :exec
insert into users (id, name, surname, username, email, phone_number, user_role) values ($1, $2, $3, $4, $5, $6, $7)
`

type AddUserParams struct {
	ID          uuid.UUID `json:"id"`
	Name        *string   `json:"name"`
	Surname     *string   `json:"surname"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	PhoneNumber string    `json:"phone_number"`
	UserRole    UserRole  `json:"user_role"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Username,
		arg.Email,
		arg.PhoneNumber,
		arg.UserRole,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, name, surname, username, email, phone_number, user_role from users u where u.email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.UserRole,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, name, surname, username, email, phone_number, user_role from users u where u.id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.UserRole,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, name, surname, username, email, phone_number, user_role from users u where u.username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.UserRole,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, name, surname, username, email, phone_number, user_role from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Username,
			&i.Email,
			&i.PhoneNumber,
			&i.UserRole,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
